import numpy as np
import matplotlib.pyplot as plt

# Definimos la función objetivo
def f(x):
    return -np.sin(x) * (1.4 - np.abs(x))

# Definimos el espacio de búsqueda
x_min = -5
x_max = 5

# Definimos los parámetros de la Búsqueda Tabú
x_actual = np.random.uniform(x_min, x_max)
x_tabu = [x_actual]
iteraciones = 100
tam_tabu = 5

# Realizamos la Búsqueda Tabú
for i in range(iteraciones):
    # Generamos una lista de posibles soluciones vecinas
    x_vecinas = [np.random.uniform(x_min, x_max) for i in range(10)]
    x_vecinas.append(x_actual)
    # Seleccionamos la mejor solución vecina que no esté en la lista tabú
    x_nueva = min([x for x in x_vecinas if x not in x_tabu], key=f)
    # Agregamos la solución nueva a la lista tabú
    x_tabu.append(x_nueva)
    if len(x_tabu) > tam_tabu:
        x_tabu.pop(0)
    # Actualizamos la solución actual si la nueva solución es mejor
    if f(x_nueva) < f(x_actual):
        x_actual = x_nueva

# Graficamos la función objetivo y el proceso de búsqueda
x = np.linspace(x_min, x_max, 100)
y = f(x)
plt.plot(x, y, label="Función Objetivo")
plt.plot(x_tabu, [f(x) for x in x_tabu], 'ro-', label="Proceso de Búsqueda")
plt.legend()
plt.show()
