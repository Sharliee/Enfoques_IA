import networkx as nx
import matplotlib.pyplot as plt
from queue import PriorityQueue

# Creamos el grafo no dirigido
G = nx.Graph()
G.add_edges_from([('A', 'B', {'weight': 4}), ('A', 'C', {'weight': 1}), ('B', 'C', {'weight': 2}), ('B', 'D', {'weight': 5}), ('C', 'D', {'weight': 1}), ('C', 'E', {'weight': 6}), ('D', 'E', {'weight': 3})])

# Implementamos la función gbfs
def gbfs(G, start, end):
    visited = set()  # Conjunto de nodos visitados
    pq = PriorityQueue()  # Cola de prioridad para los nodos
    pq.put((0, start))  # Agregamos el nodo de inicio con una prioridad de 0
    while not pq.empty():  # Mientras la cola no esté vacía
        node = pq.get()[1]  # Obtenemos el nodo con la menor prioridad
        if node == end:  # Si encontramos el nodo objetivo
            return visited  # Regresamos el conjunto de nodos visitados
        if node not in visited:  # Si el nodo no ha sido visitado aún
            visited.add(node)  # Lo agregamos al conjunto de nodos visitados
            for neighbor in G.neighbors(node):  # Para cada vecino del nodo actual
                if neighbor not in visited:  # Si el vecino no ha sido visitado aún
                    pq.put((G[node][neighbor]['weight'], neighbor))  # Agregamos el vecino a la cola de prioridad con su peso como prioridad
    return None  # Si no encontramos el nodo objetivo, regresamos None

# Llamamos a la función gbfs con el nodo de inicio y el nodo objetivo
path = gbfs(G, 'A', 'E')
if path is not None:  # Si se encontró un camino
    print("El camino más corto es:", list(path))  # Imprimimos el camino más corto
else:  # Si no se encontró un camino
    print("No se encontró un camino")

# Visualizamos el grafo y el camino encontrado
nx.draw(G, with_labels=True)  # Dibujamos el grafo
nx.draw_networkx_edges(G, nx.path_graph(path), edge_color='r', width=5)  # Dibujamos el camino más corto en rojo
plt.show()  # Mostramos la figura
